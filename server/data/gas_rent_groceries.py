import sqlite3
from lib.config import iso_list, new_york_rent, new_york_salary, new_york_grocery, gas_rent_grocery_api, sqlite_db
import datetime
from helper_class.api_helper import api
from lib.database import database

# get current date (especially interested in the week_number)
current_date = datetime.date.today()
year, week_number, day_of_week = current_date.isocalendar()

# Initialize database
db = database(sqlite_db)

# Create table if it does not exists
db.add_table('financials', country='text', gasoline='text', rent='text', groceries='text')

gasoline_api = f'http://knoema.com/api/1.0/data/GPPW?time=2019W{week_number}&countryindicator=1000030&measure=1000000&frequencies=W'
rent_api = 'http://knoema.com/api/1.0/data/COOFLIIND2016?time=&uiMode=last&uiParams=1&countryindicator=1000010&frequencies=A'
groceries_api = 'http://knoema.com/api/1.0/data/COOFLIIND2016?time=&uiMode=last&uiParams=1&countryindicator=1000030&frequencies=A'

def fincancials_data(api_link, data_type) :
  try:
    api_url = api(api_link)
    json_data = api_url.get_json()['data']
    for i in json_data:
      for country in iso_list:
        try:
          if i['RegionId'] == country:
            data_to_insert = i['Value']
            print('Country:', i['RegionId'], '-> Current', data_type, 'cost:', data_to_insert)
            if data_type == 'gasoline':
              db.insert('financials', str(country), str(data_to_insert), '', '')
            elif data_type == 'rent':
              where_claus = f'country={country}'
              column_value = f'rent={data_to_insert}'
              db.update('financials', table_name, column_value)
            elif data_type == 'groceries':
              where_claus = f'country={country}'
              column_value = f'groceries={data_to_insert}'
              db.update('financials', table_name, column_value)
        except Exception as e:
          print(f'Could not get {data_type} data for {country} because of the following error: {e}')
  except Exception as e:
    print(f'Could not get response from api because of the following error: {e}')

fincancials_data(gasoline_api, 'gasoline')
fincancials_data(rent_api, 'rent')
fincancials_data(groceries_api, 'groceries')
